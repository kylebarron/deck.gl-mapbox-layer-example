{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["mapStyle","require","initialViewState","longitude","latitude","zoom","pitch","bearing","Map","state","_onWebGLInitialized","gl","setState","_onMapLoad","map","_map","deck","_deck","addLayer","MapboxLayer","id","this","layers","ScatterplotLayer","data","position","size","getPosition","d","getRadius","getFillColor","TileLayer","pickable","onHover","_onHover","autoHighlight","highlightColor","minZoom","maxZoom","renderSubLayers","props","tile","bbox","west","south","east","north","BitmapLayer","image","bounds","ref","onBeforeRender","pushContextState","onAfterRender","popContextState","controller","onWebGLInitialized","getMap","onLoad","mapOptions","hash","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oq/BAWMA,G,OAAWC,EAAQ,MAEnBC,EAAmB,CACvBC,WAAY,SACZC,SAAU,QACVC,KAAM,KACNC,MAAO,EACPC,QAAS,GAGUC,E,4MACnBC,MAAQ,G,EAGRC,oBAAsB,SAACC,GACrB,EAAKC,SAAS,CAAED,Q,EAGlBE,WAAa,WACX,IAAMC,EAAM,EAAKC,KACXC,EAAO,EAAKC,MAGlBH,EAAII,SACF,IAAIC,IAAY,CAAEC,GAAI,iBAAkBJ,SACxC,kBAEFF,EAAII,SACF,IAAIC,IAAY,CAAEC,GAAI,aAAcJ,SACpC,mB,uDAIM,IAAD,OACCL,EAAOU,KAAKZ,MAAZE,GACFW,EAAS,CACb,IAAIC,IAAiB,CACnBH,GAAI,iBACJI,KAAM,CAAC,CAAEC,SAAU,EAAE,WAAY,YAAaC,KAAM,MACpDC,YAAa,SAACC,GAAD,OAAOA,EAAEH,UACtBI,UAAW,SAACD,GAAD,OAAOA,EAAEF,MACpBI,aAAc,CAAC,EAAG,EAAG,OAEvB,IAAIC,IAAU,CACZX,GAAI,aAEJI,KAAM,mDAENQ,UAAU,EACVC,QAASZ,KAAKa,SACdC,eAAe,EACfC,eAAgB,CAAC,GAAI,GAAI,GAAI,IAE7BC,QAAS,EACTC,QAAS,GAETC,gBAAiB,SAACC,GAAW,IAAD,EAGtBA,EAAMC,KADRC,KAAQC,EAFgB,EAEhBA,KAAMC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,KAAMC,EAFH,EAEGA,MAG7B,OAAO,IAAIC,IAAYP,EAAO,CAC5BhB,KAAM,KACNwB,MAAOR,EAAMhB,KACbyB,OAAQ,CAACN,EAAMC,EAAOC,EAAMC,SAMpC,OACE,kBAAC,IAAD,CACEI,IAAK,SAACA,GAEJ,EAAKjC,MAAQiC,GAAOA,EAAIlC,MAE1BM,OAAQA,EACRpB,iBAAkBA,EAClBiD,eAAgB,kBAAMC,YAAiBzC,IACvC0C,cAAe,kBAAMC,YAAgB3C,IACrC4C,YAAU,EACVC,mBAAoBnC,KAAKX,qBAExBC,GACC,kBAAC,IAAD,CACEuC,IAAK,SAACA,GAEJ,EAAKnC,KAAOmC,GAAOA,EAAIO,UAEzB9C,GAAIA,EACJ+C,OAAQrC,KAAKR,WACbb,SAAUA,EACV2D,WAAY,CAAEC,MAAM,U,GAlFCC,IAAMC,WCTnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.94b736e6.chunk.js","sourcesContent":["import React from \"react\";\nimport DeckGL from \"@deck.gl/react\";\nimport { ScatterplotLayer, BitmapLayer } from \"@deck.gl/layers\";\nimport { TileLayer } from \"@deck.gl/geo-layers\";\nimport { MapboxLayer } from \"@deck.gl/mapbox\";\nimport { StaticMap } from \"react-map-gl\";\nimport { pushContextState, popContextState } from \"@luma.gl/gltools\";\n\n// You'll get obscure errors without including the Mapbox GL CSS\nimport \"./mapbox-gl.css\";\n\nconst mapStyle = require(\"./style.json\");\n\nconst initialViewState = {\n  longitude: -112.1861,\n  latitude: 36.1284,\n  zoom: 12.1,\n  pitch: 0,\n  bearing: 0,\n};\n\nexport default class Map extends React.Component {\n  state = {};\n\n  // DeckGL and mapbox will both draw into this WebGL context\n  _onWebGLInitialized = (gl) => {\n    this.setState({ gl });\n  };\n\n  _onMapLoad = () => {\n    const map = this._map;\n    const deck = this._deck;\n\n    // This id has to match the id of the Deck layer\n    map.addLayer(\n      new MapboxLayer({ id: \"my-scatterplot\", deck }),\n      \"waterway_other\"\n    );\n    map.addLayer(\n      new MapboxLayer({ id: \"tile-layer\", deck }),\n      \"waterway_other\"\n    );\n  };\n\n  render() {\n    const { gl } = this.state;\n    const layers = [\n      new ScatterplotLayer({\n        id: \"my-scatterplot\",\n        data: [{ position: [-112.152317, 36.0723292], size: 100 }],\n        getPosition: (d) => d.position,\n        getRadius: (d) => d.size,\n        getFillColor: [0, 0, 255],\n      }),\n      new TileLayer({\n        id: 'tile-layer',\n        // https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames#Tile_servers\n        data: \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n\n        pickable: true,\n        onHover: this._onHover,\n        autoHighlight: true,\n        highlightColor: [60, 60, 60, 40],\n        // https://wiki.openstreetmap.org/wiki/Zoom_levels\n        minZoom: 0,\n        maxZoom: 19,\n\n        renderSubLayers: (props) => {\n          const {\n            bbox: { west, south, east, north },\n          } = props.tile;\n\n          return new BitmapLayer(props, {\n            data: null,\n            image: props.data,\n            bounds: [west, south, east, north],\n          });\n        },\n      }),\n    ];\n\n    return (\n      <DeckGL\n        ref={(ref) => {\n          // save a reference to the Deck instance\n          this._deck = ref && ref.deck;\n        }}\n        layers={layers}\n        initialViewState={initialViewState}\n        onBeforeRender={() => pushContextState(gl)}\n        onAfterRender={() => popContextState(gl)}\n        controller\n        onWebGLInitialized={this._onWebGLInitialized}\n      >\n        {gl && (\n          <StaticMap\n            ref={(ref) => {\n              // save a reference to the mapboxgl.Map instance\n              this._map = ref && ref.getMap();\n            }}\n            gl={gl}\n            onLoad={this._onMapLoad}\n            mapStyle={mapStyle}\n            mapOptions={{ hash: true }}\n          />\n        )}\n      </DeckGL>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}